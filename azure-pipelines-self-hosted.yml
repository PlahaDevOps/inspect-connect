trigger:
  branches:
    include:
      - main        # Only push/merge to main triggers CI/CD

pr:
  branches:
    include:
      - main        # PRs targeting main also run the pipeline (build + preview deploy)

variables:
  nodeVersion: '20.x'
  npmCacheDir: '$(Pipeline.Workspace)/.npm'

  environment: 'production'
  azureSubscription: 'inspect-connect-appservice'
  resourceGroupName: 'inspect_connect-rg'

  frontendAppName: 'inspect-connect-test'
  backendAppName:  'inspect-connect-api-test'

  # --- gating & preview slot ---
  isMainPush: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))]
  prSlot: 'staging'   # use 'pr-$(System.PullRequest.PullRequestNumber)' for per-PR slots

stages:
# =========================
# Stage 1: Build (FE & BE)
# =========================
- stage: Build
  displayName: Build Frontend & Backend
  jobs:
  - job: BuildAll
    displayName: Build
    pool:
      name: 'inspect-connect-agents'

    steps:
    - checkout: self

    - task: NodeTool@0
      inputs: { versionSpec: $(nodeVersion) }
      displayName: Use Node.js $(nodeVersion)

    # Resolve backend default hostname for VITE_API_URL (prod app host)
    - task: AzureCLI@2
      displayName: 'Resolve BE defaultHostName'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(backendAppName) --query defaultHostName -o tsv)
          echo "Resolved backend host: $HOST"
          echo "##vso[task.setvariable variable=BACKEND_HOST]$HOST"

    # --- Frontend ---
    - script: |
        set -e
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --prefer-offline --no-audit || npm install --legacy-peer-deps --prefer-offline --no-audit
        npm run build || npx vite build
      workingDirectory: client
      displayName: 'FE: Install & Build'
      env:
        VITE_API_URL: "https://$(BACKEND_HOST)"

    - task: ArchiveFiles@2
      displayName: 'FE: Package dist'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/client/dist'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: 'FE: Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        artifact: 'frontend'

    # --- Backend --- (slim ZIP: package.json, dist/**, prod node_modules/**)
    - script: |
        set -e
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --prefer-offline --no-audit || npm install --legacy-peer-deps --prefer-offline --no-audit
        npm run build

        rm -rf publish && mkdir publish
        cp package*.json publish/ 2>/dev/null || true

        npm install --omit=dev --prefix publish --legacy-peer-deps --prefer-offline --no-audit
        cp -r dist publish/

        (cd publish && zip -r ../server.zip .)
      workingDirectory: server
      displayName: 'BE: Build & Create slim ZIP'

    - task: PublishPipelineArtifact@1
      displayName: 'BE: Publish artifact'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/server/server.zip'
        artifact: 'backend'

# =========================================
# Stage 2: Preview Deploy (PR -> slot only)
# =========================================
- stage: PreviewDeploy
  displayName: "Preview Deploy (PR -> slot)"
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: DeployPreview
    displayName: "Deploy FE & BE to $(prSlot) slot"
    pool:
      name: 'inspect-connect-agents'
    steps:
    - checkout: none

    # Get artifacts
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'frontend'
        path: '$(Pipeline.Workspace)/frontend'
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'backend'
        path: '$(Pipeline.Workspace)/backend'

    # Create slots if missing (idempotent)
    - task: AzureCLI@2
      displayName: "Create slots (if needed)"
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          az webapp deployment slot create -g $(resourceGroupName) -n $(frontendAppName) --slot $(prSlot) --configuration-source $(frontendAppName) || true
          az webapp deployment slot create -g $(resourceGroupName) -n $(backendAppName)  --slot $(prSlot) --configuration-source $(backendAppName)  || true

    # FE: deploy to slot
    - task: AzureCLI@2
      displayName: "FE: Deploy to slot"
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          az webapp deploy -g $(resourceGroupName) -n $(frontendAppName) --slot $(prSlot) \
            --src-path "$(Pipeline.Workspace)/frontend/frontend.zip" --type zip --restart true --timeout 1800
          az webapp config appsettings set -g $(resourceGroupName) -n $(frontendAppName) --slot $(prSlot) \
            --settings WEBSITES_PORT=8080
          az webapp config set -g $(resourceGroupName) -n $(frontendAppName) --slot $(prSlot) \
            --startup-file "pm2 serve /home/site/wwwroot 8080 --spa --no-daemon"

    # FE: resolve slot host & smoke test
    - task: AzureCLI@2
      displayName: "FE: Resolve slot host"
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(frontendAppName) --slot $(prSlot) --query defaultHostName -o tsv)
          echo "##vso[task.setvariable variable=FE_SLOT_HOST]$HOST"
    - bash: |
        set -euo pipefail
        URL="https://$(FE_SLOT_HOST)"
        echo "Probing $URL ..."
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
            echo "Frontend slot reachable (HTTP $code)"
            break
          fi
          sleep 5
        done
        html=$(curl -fsSL "$URL")
        echo "$html" | grep -qi "<title>" || { echo "Missing <title> in HTML"; exit 1; }
      displayName: "FE: Slot smoke check"

    # BE: deploy to slot
    - task: AzureCLI@2
      displayName: "BE: Deploy to slot"
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          az webapp config set -g $(resourceGroupName) -n $(backendAppName) --slot $(prSlot) --linux-fx-version "NODE|20-lts"
          az webapp config appsettings set -g $(resourceGroupName) -n $(backendAppName) --slot $(prSlot) --settings \
            WEBSITE_RUN_FROM_PACKAGE=1 WEBSITE_NODE_DEFAULT_VERSION="~20" NODE_ENV=production
          az webapp deploy -g $(resourceGroupName) -n $(backendAppName) --slot $(prSlot) \
            --src-path "$(Pipeline.Workspace)/backend/server.zip" --type zip --restart true --timeout 1800
          az webapp config set -g $(resourceGroupName) -n $(backendAppName) --slot $(prSlot) \
            --startup-file "node dist/server.js"

    # BE: resolve slot host & smoke test
    - task: AzureCLI@2
      displayName: "BE: Resolve slot host"
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(backendAppName) --slot $(prSlot) --query defaultHostName -o tsv)
          echo "##vso[task.setvariable variable=BE_SLOT_HOST]$HOST"
    - bash: |
        set -euo pipefail
        URL="https://$(BE_SLOT_HOST)/"
        echo "Probing $URL ..."
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$code" = "200" ]; then
            echo "Backend slot healthy (HTTP 200)"
            exit 0
          fi
          sleep 5
        done
        echo "Backend slot did not become healthy"; exit 1
      displayName: "BE: Slot smoke check"

# =======================================
# Stage 3: Frontend Deploy (prod, main only)
# =======================================
- stage: FrontendDeploy
  displayName: Deploy Frontend
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMainPush, 'true'))
  jobs:
  - job: DeployFrontend
    pool:
      name: 'inspect-connect-agents'
    steps:
    - checkout: none   # 🚀 skip repo checkout, only use artifact

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'frontend'
        path: '$(Pipeline.Workspace)/frontend'

    - task: AzureCLI@2
      displayName: 'FE: ZipDeploy'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp deployment source config-zip --resource-group $(resourceGroupName) --name $(frontendAppName) --src "$(Pipeline.Workspace)/frontend/frontend.zip"
          az webapp config appsettings set --resource-group $(resourceGroupName) --name $(frontendAppName) --settings WEBSITES_PORT=8080
          az webapp config set --resource-group $(resourceGroupName) --name $(frontendAppName) --startup-file "pm2 serve /home/site/wwwroot 8080 --spa --no-daemon"

    - task: AzureCLI@2
      displayName: 'FE: Resolve defaultHostName'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(frontendAppName) --query defaultHostName -o tsv)
          echo "Resolved FE host: $HOST"
          echo "##vso[task.setvariable variable=FE_HOST]$HOST"

    - bash: |
        set -euo pipefail
        URL="https://$(FE_HOST)"
        echo "Probing $URL ..."
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
            echo "Frontend reachable (HTTP $code)"
            break
          fi
          echo "Attempt $i: HTTP $code; retrying..."
          sleep 5
        done
        html=$(curl -fsSL "$URL")
        echo "$html" | grep -qi "<title>" || { echo "Missing <title> in HTML"; exit 1; }
      displayName: 'FE: Smoke check'

# =====================================
# Stage 4: Backend Deploy (prod, main only)
# =====================================
- stage: BackendDeploy
  displayName: Deploy Backend
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMainPush, 'true'))
  jobs:
  - job: DeployBackend
    pool:
      name: 'inspect-connect-agents'
    steps:
    - checkout: none   # 🚀 skip repo checkout, only use artifact

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'backend'
        path: '$(Pipeline.Workspace)/backend'

    - bash: |
        set -euo pipefail
        echo "Pipeline.Workspace => $(Pipeline.Workspace)"
        ls -lah "$(Pipeline.Workspace)/backend" || true

        ZIP="$(Pipeline.Workspace)/backend/server.zip"
        if [ ! -f "$ZIP" ]; then
          echo "❌ server.zip not found under backend/"
          ls -la "$(Pipeline.Workspace)/backend/" || true
          exit 1
        fi

        TMP_FILE="$(mktemp)"
        trap 'rm -f "$TMP_FILE"' EXIT

        echo "✅ server.zip found, checking contents..."
        unzip -l "$ZIP" > "$TMP_FILE" 2>/dev/null || true

        if grep -qE "package\.json|(^| )dist/|node_modules" "$TMP_FILE"; then
          echo "✅ Found expected entries (package.json, dist/, node_modules)"
          grep -E "package\.json|(^| )dist/|node_modules" "$TMP_FILE" | head -n 50 || true
          echo "✅ Artifact sanity check passed"
        else
          echo "❌ Expected files not found in server.zip"
          exit 1
        fi
      displayName: 'BE: Sanity-check artifact'

    - task: AzureCLI@2
      displayName: 'BE: az webapp deploy (Run-From-Package)'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          az webapp config set -g $(resourceGroupName) -n $(backendAppName) --linux-fx-version "NODE|20-lts"
          az webapp config appsettings set -g $(resourceGroupName) -n $(backendAppName) --settings \
            WEBSITE_RUN_FROM_PACKAGE=1 WEBSITE_NODE_DEFAULT_VERSION="~20" NODE_ENV=production \
            MONGODB_URI="$(MONGODB_URI)" JWT_SECRET="$(JWT_SECRET)" SENDGRID_API_KEY="$(SENDGRID_API_KEY)" \
            TWILIO_ACCOUNT_SID="$(TWILIO_ACCOUNT_SID)" TWILIO_AUTH_TOKEN="$(TWILIO_AUTH_TOKEN)" \
            CLOUDINARY_CLOUD_NAME="$(CLOUDINARY_CLOUD_NAME)" CLOUDINARY_API_KEY="$(CLOUDINARY_API_KEY)" \
            CLOUDINARY_API_SECRET="$(CLOUDINARY_API_SECRET)"
          az webapp deploy -g $(resourceGroupName) -n $(backendAppName) \
            --src-path "$(Pipeline.Workspace)/backend/server.zip" \
            --type zip --restart true --timeout 1800
          az webapp config set -g $(resourceGroupName) -n $(backendAppName) \
            --startup-file "node dist/server.js"

    - task: AzureCLI@2
      displayName: 'BE: Resolve defaultHostName'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(backendAppName) --query defaultHostName -o tsv)
          echo "Resolved BE host: $HOST"
          echo "##vso[task.setvariable variable=BE_HOST]$HOST"

    - bash: |
        set -euo pipefail
        URL="https://$(BE_HOST)/"
        echo "Probing $URL ..."
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$code" = "200" ]; then
            echo "Backend healthy (HTTP 200)"
            exit 0
          fi
          echo "Attempt $i: HTTP $code; retrying..."
          sleep 5
        done
        echo "Backend did not become healthy"; exit 1
      displayName: 'BE: Smoke check'

# =====================================
# Stage 5: Summary (prod, main only)
# =====================================
- stage: DeploymentSummary
  displayName: Deployment Summary
  dependsOn: [ FrontendDeploy, BackendDeploy ]
  condition: and(succeeded(), eq(variables.isMainPush, 'true'))
  jobs:
  - job: Summary
    pool:
      name: 'inspect-connect-agents'
    steps:
    - script: |
        echo "=============================================================================="
        echo "🎉 DEPLOYMENT COMPLETE"
        echo "=============================================================================="
        echo "Frontend URL (resolved at runtime)."
        echo "Backend  URL (resolved at runtime)."
        echo "Env: $(environment) | Build: $(Build.BuildNumber)"
      displayName: Summary
