# =============================================================================
# Inspect Connect - CI/CD (single build job, change-aware, minimal cache)
# =============================================================================

trigger:
  branches:
    include: [ main, develop ]
  paths:
    include:
      - client/*
      - server/*
      - azure-pipelines-self-hosted.yml

variables:
  # Tooling
  nodeVersion: '20.x'
  npmCacheDir: '$(Pipeline.Workspace)/.npm'

  # Environment
  environment: 'production'
  azureSubscription: 'inspect-connect-appservice'
  resourceGroupName: 'inspect_connect-rg'

  # App Services (confirmed in portal)
  frontendAppName: 'inspect-connect-test'
  backendAppName:  'inspect-connect-api-test'

  # Toggles
  runAzureValidation: 'false'     # set 'true' when debugging
  system.debug: 'false'           # set 'true' for verbose agent logs

stages:
# =============================================================================
# Stage 1: Build (FE then BE), with change detection
# =============================================================================
- stage: Build
  displayName: Build (change-aware)
  jobs:
  - job: BuildAll
    displayName: Build Frontend & Backend
    pool:
      name: 'inspect-connect-agents'
      demands: [ agent.name -equals inspect-connect-mac-agent ]

    steps:
    - checkout: self
      fetchDepth: 0

    - task: NodeTool@0
      inputs: { versionSpec: $(nodeVersion) }
      displayName: Use Node.js $(nodeVersion)

    # Detect which folders changed vs previous commit
    - bash: |
        set -e
        prev=$(git rev-parse HEAD~1 || echo "")
        echo "Prev commit: $prev"
        changed=$(git diff --name-only ${prev:-HEAD} HEAD || true)
        echo "Changed files:"
        echo "$changed"

        fe=false; be=false
        echo "$changed" | grep -E '^client/' >/dev/null && fe=true
        echo "$changed" | grep -E '^server/' >/dev/null && be=true

        # If this is the first commit (or manual run), default to building both
        if [ -z "$prev" ]; then fe=true; be=true; fi

        echo "##vso[task.setvariable variable=buildClient;isOutput=true]$fe"
        echo "##vso[task.setvariable variable=buildServer;isOutput=true]$be"
        echo "Client changed? $fe  |  Server changed? $be"
      name: detect
      displayName: Detect changed areas

    # Shared npm tarball cache (used by both apps)
    - task: Cache@2
      displayName: Restore npm tarball cache (shared)
      inputs:
        key: 'npm-cache | $(Agent.OS)'
        path: '$(npmCacheDir)'

    # ================================
    # Frontend (only if changed)
    # ================================
    - task: Cache@2
      displayName: Restore node_modules (client)
      condition: eq(variables['detect.buildClient'], 'true')
      inputs:
        key: 'node_modules | $(Agent.OS) | client | $(Build.SourcesDirectory)/client/package-lock.json'
        restoreKeys: 'node_modules | $(Agent.OS) | client'
        path: '$(Build.SourcesDirectory)/client/node_modules'

    - script: |
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --prefer-offline --no-audit
      workingDirectory: client
      displayName: FE: Install deps
      condition: eq(variables['detect.buildClient'], 'true')

    - script: npx tsc --noEmit || echo "TypeScript warnings (non-blocking)"
      workingDirectory: client
      displayName: FE: Type check (non-blocking)
      continueOnError: true
      condition: eq(variables['detect.buildClient'], 'true')

    - script: |
        echo "Building frontend (Vite)â€¦"
        npx vite build
      env:
        VITE_API_URL: "https://$(backendAppName).canadacentral-01.azurewebsites.net"
      workingDirectory: client
      displayName: FE: Build (Vite)
      condition: eq(variables['detect.buildClient'], 'true')

    - task: ArchiveFiles@2
      displayName: FE: Package dist
      condition: eq(variables['detect.buildClient'], 'true')
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/client/dist'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: FE: Publish artifact
      condition: eq(variables['detect.buildClient'], 'true')
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        artifact: 'frontend'

    # Mark FE built for downstream stages
    - bash: echo "##vso[task.setvariable variable=feBuilt;isOutput=true]$(detect.buildClient)"
      name: feOut
      displayName: FE: Output flag

    # ================================
    # Backend (only if changed)
    # ================================
    - task: Cache@2
      displayName: Restore node_modules (server)
      condition: eq(variables['detect.buildServer'], 'true')
      inputs:
        key: 'node_modules | $(Agent.OS) | server | $(Build.SourcesDirectory)/server/package-lock.json'
        restoreKeys: 'node_modules | $(Agent.OS) | server'
        path: '$(Build.SourcesDirectory)/server/node_modules'

    - script: |
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --prefer-offline --no-audit
        npm run build
        npm prune --omit=dev
      workingDirectory: server
      displayName: BE: Install / Build / Prune
      condition: eq(variables['detect.buildServer'], 'true')

    - task: ArchiveFiles@2
      displayName: BE: Package app
      condition: eq(variables['detect.buildServer'], 'true')
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/server'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: BE: Publish artifact
      condition: eq(variables['detect.buildServer'], 'true')
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/server.zip'
        artifact: 'backend'

    # Mark BE built for downstream stages
    - bash: echo "##vso[task.setvariable variable=beBuilt;isOutput=true]$(detect.buildServer)"
      name: beOut
      displayName: BE: Output flag

# =============================================================================
# Stage 2: Frontend Deploy (runs only if FE built)
# =============================================================================
- stage: FrontendDeploy
  displayName: Deploy Frontend
  dependsOn: Build
  condition: eq(dependencies.Build.outputs['BuildAll.feOut.feBuilt'], 'true')
  jobs:
  - job: DeployFrontend
    displayName: Deploy Frontend
    pool:
      name: 'inspect-connect-agents'
      demands: [ agent.name -equals inspect-connect-mac-agent ]
    checkout: none
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'frontend'
        path: '$(Pipeline.Workspace)/frontend'

    - script: |
        ls -lah $(Pipeline.Workspace)/frontend/
        test -f $(Pipeline.Workspace)/frontend/frontend.zip
      displayName: FE: Verify artifact

    - task: AzureCLI@2
      condition: eq(variables['runAzureValidation'], 'true')
      continueOnError: true
      displayName: FE: Azure validation
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp show -n $(frontendAppName) -g $(resourceGroupName) -o table

    - task: AzureWebApp@1
      displayName: FE: ZipDeploy
      inputs:
        azureSubscription: $(azureSubscription)
        appType: webAppLinux
        appName: $(frontendAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/frontend/frontend.zip'
        appSettings: '-WEBSITES_PORT 8080'
        startupCommand: 'pm2 serve /home/site/wwwroot 8080 --spa --no-daemon'

# =============================================================================
# Stage 3: Backend Deploy (runs only if BE built)
# =============================================================================
- stage: BackendDeploy
  displayName: Deploy Backend
  dependsOn: Build
  condition: eq(dependencies.Build.outputs['BuildAll.beOut.beBuilt'], 'true')
  jobs:
  - job: DeployBackend
    displayName: Deploy Backend
    pool:
      name: 'inspect-connect-agents'
      demands: [ agent.name -equals inspect-connect-mac-agent ]
    checkout: none
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'backend'
        path: '$(Pipeline.Workspace)/backend'

    - script: |
        ls -lah $(Pipeline.Workspace)/backend/
        test -f $(Pipeline.Workspace)/backend/server.zip
      displayName: BE: Verify artifact

    - task: AzureCLI@2
      condition: eq(variables['runAzureValidation'], 'true')
      continueOnError: true
      displayName: BE: Azure validation
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp show -n $(backendAppName) -g $(resourceGroupName) -o table

    - task: AzureWebApp@1
      displayName: BE: ZipDeploy
      inputs:
        azureSubscription: $(azureSubscription)
        appType: webAppLinux
        appName: $(backendAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/backend/server.zip'
        appSettings: |
          -WEBSITE_NODE_DEFAULT_VERSION ~20
          -WEBSITES_PORT 5002
          -NODE_ENV production
          -MONGODB_URI $(MONGODB_URI)
          -JWT_SECRET $(JWT_SECRET)
          -SENDGRID_API_KEY $(SENDGRID_API_KEY)
          -TWILIO_ACCOUNT_SID $(TWILIO_ACCOUNT_SID)
          -TWILIO_AUTH_TOKEN $(TWILIO_AUTH_TOKEN)
          -CLOUDINARY_CLOUD_NAME $(CLOUDINARY_CLOUD_NAME)
          -CLOUDINARY_API_KEY $(CLOUDINARY_API_KEY)
          -CLOUDINARY_API_SECRET $(CLOUDINARY_API_SECRET)
        startupCommand: 'node dist/server.js'

# =============================================================================
# Stage 4: Summary (runs only if at least one deploy ran)
# =============================================================================
- stage: DeploymentSummary
  displayName: Deployment Summary
  dependsOn: [ FrontendDeploy, BackendDeploy ]
  condition: or(
    eq(dependencies.Build.outputs['BuildAll.feOut.feBuilt'], 'true'),
    eq(dependencies.Build.outputs['BuildAll.beOut.beBuilt'], 'true')
  )
  jobs:
  - job: Summary
    pool:
      name: 'inspect-connect-agents'
      demands: [ agent.name -equals inspect-connect-mac-agent ]
    steps:
    - script: |
        echo "=============================================================================="
        echo "ðŸŽ‰ DEPLOYMENT COMPLETE"
        echo "=============================================================================="
        echo "Frontend URL: https://$(frontendAppName).canadacentral-01.azurewebsites.net"
        echo "Backend  URL: https://$(backendAppName).canadacentral-01.azurewebsites.net"
        echo "Env: $(environment) | Build: $(Build.BuildNumber)"
      displayName: Summary
