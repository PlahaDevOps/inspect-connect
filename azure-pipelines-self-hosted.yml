# =============================================================================
# Inspect Connect - Production CI/CD Pipeline
# =============================================================================
# 
# This pipeline builds and deploys the Inspect Connect application using a
# self-hosted agent for improved performance and cost efficiency.
#
# Features:
# - Multi-stage build with caching for faster builds
# - ARM-based deployment to Azure App Service
# - Environment-specific configuration
# - Comprehensive error handling
#
# Note: X64 emulation warning is expected on Apple Silicon Macs - this doesn't affect functionality
# =============================================================================

trigger:
  branches: 
    include: 
      - main
      - develop
  paths:
    include:
      - client/*
      - server/*
      - azure-pipelines-self-hosted.yml

variables:
  # Build Configuration
  nodeVersion: '20.x'
  npmCacheDir: '$(Pipeline.Workspace)/.npm'
  
  # Environment Configuration
  environment: 'production'
  frontendAppName: 'inspect-connect-test'
  backendAppName: 'inspect-connect-api-test'
  resourceGroupName: 'inspect_connect-rg'
  
  # Service Connection
  azureSubscription: 'inspect-connect-appservice'

stages:
- stage: BuildAndDeploy
  displayName: 'Build and Deploy to Production'
  jobs:
  - job: FullStackDeployment
    displayName: 'Full-Stack Application Deployment'
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent

    steps:
    # =============================================================================
    # Environment Setup & Validation
    # =============================================================================
    - task: NodeTool@0
      inputs: { versionSpec: $(nodeVersion) }
      displayName: 'Setup Node.js Environment'

    - script: |
        echo "=== Environment Information ==="
        echo "Node.js Version: $(node -v)"
        echo "NPM Version: $(npm -v)"
        echo "Build Agent: $(Agent.Name)"
        echo "Working Directory: $(Build.SourcesDirectory)"
        echo "================================="
        
        # Install global dependencies
        npm i -g typescript
        echo "TypeScript Version: $(tsc -v)"
      displayName: 'Validate Build Environment'

    # ---- FRONTEND ----------------------------------------------------------
    # Cache npm cache dir (for tarballs) + node_modules
    - task: Cache@2
      displayName: Restore npm cache (client)
      inputs:
        key: 'npm-cache | $(Agent.OS) | client'
        restoreKeys: 'npm-cache | $(Agent.OS)'
        path: '$(npmCacheDir)'

    - task: Cache@2
      displayName: Restore node_modules (client)
      inputs:
        key: 'node_modules | $(Agent.OS) | client | $(Build.SourcesDirectory)/client/package.json'
        restoreKeys: |
          node_modules | $(Agent.OS) | client
        path: '$(Build.SourcesDirectory)/client/node_modules'

    - script: |
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --no-audit --prefer-offline || npm install --legacy-peer-deps --no-audit --prefer-offline
      workingDirectory: $(Build.SourcesDirectory)/client
      displayName: Install Frontend Dependencies

    - task: Cache@2
      displayName: Save node_modules (client)
      inputs:
        key: 'node_modules | $(Agent.OS) | client | $(Build.SourcesDirectory)/client/package.json'
        path: '$(Build.SourcesDirectory)/client/node_modules'

    # Optional typecheck (wonâ€™t fail the build)
    - script: npx tsc --noEmit || true
      workingDirectory: $(Build.SourcesDirectory)/client
      displayName: Type Check (non-blocking)
      continueOnError: true

    - script: npx vite build
      workingDirectory: $(Build.SourcesDirectory)/client
      displayName: Build Frontend (Vite)

    # =============================================================================
    # Frontend Application Deployment
    # =============================================================================
    - task: AzureWebApp@1
      displayName: 'Deploy Frontend to Azure App Service'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: webAppLinux
        appName: $(frontendAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Build.SourcesDirectory)/client/dist'
        appSettings: '-VITE_API_URL https://inspect-connect-api-test-bgb3gea5c0ezfkfe.canadacentral-01.azurewebsites.net -WEBSITES_PORT 80'
        startupCommand: 'pm2 serve /home/site/wwwroot --spa --no-daemon'

    # =============================================================================
    # Backend Application Build
    # =============================================================================
    - task: Cache@2
      displayName: 'Restore Backend Dependencies Cache'
      inputs:
        key: 'npm-cache | $(Agent.OS) | server'
        restoreKeys: 'npm-cache | $(Agent.OS)'
        path: '$(npmCacheDir)'

    - task: Cache@2
      displayName: 'Restore Backend node_modules'
      inputs:
        key: 'node_modules | $(Agent.OS) | server | $(Build.SourcesDirectory)/server/package.json'
        restoreKeys: |
          node_modules | $(Agent.OS) | server
        path: '$(Build.SourcesDirectory)/server/node_modules'

    - script: |
        echo "Installing backend dependencies..."
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --no-audit --prefer-offline || npm install --legacy-peer-deps --no-audit --prefer-offline
        echo "Backend dependencies installed successfully"
      workingDirectory: $(Build.SourcesDirectory)/server
      displayName: 'Install Backend Dependencies'

    - task: Cache@2
      displayName: 'Cache Backend node_modules'
      inputs:
        key: 'node_modules | $(Agent.OS) | server | $(Build.SourcesDirectory)/server/package.json'
        path: '$(Build.SourcesDirectory)/server/node_modules'

    - script: |
        echo "Building backend application..."
        npm run build
        echo "Backend build completed successfully"
      workingDirectory: $(Build.SourcesDirectory)/server
      displayName: 'Build Backend Application'

    # =============================================================================
    # Backend Application Packaging
    # =============================================================================
    - task: ArchiveFiles@2
      displayName: 'Package Backend Application'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/server'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true

    # =============================================================================
    # Backend Application Deployment
    # =============================================================================
    - task: AzureWebApp@1
      displayName: 'Deploy Backend to Azure App Service'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: webAppLinux
        appName: $(backendAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Build.ArtifactStagingDirectory)/server.zip'
        appSettings: '-SCM_DO_BUILD_DURING_DEPLOYMENT true -WEBSITE_NODE_DEFAULT_VERSION ~20 -MONGODB_URI $(MONGODB_URI) -JWT_SECRET $(JWT_SECRET) -SENDGRID_API_KEY $(SENDGRID_API_KEY) -TWILIO_ACCOUNT_SID $(TWILIO_ACCOUNT_SID) -TWILIO_AUTH_TOKEN $(TWILIO_AUTH_TOKEN) -CLOUDINARY_CLOUD_NAME $(CLOUDINARY_CLOUD_NAME) -CLOUDINARY_API_KEY $(CLOUDINARY_API_KEY) -CLOUDINARY_API_SECRET $(CLOUDINARY_API_SECRET)'
        # If you prefer not to rely on Oryx detection:
        # startupCommand: 'node dist/server.js'

    # =============================================================================
    # Deployment Summary & Validation
    # =============================================================================
    - script: |
        echo "=============================================================================="
        echo "ðŸŽ‰ DEPLOYMENT COMPLETED SUCCESSFULLY"
        echo "=============================================================================="
        echo ""
        echo "ðŸ“± Frontend Application:"
        echo "   URL: https://inspect-connect-test-fyanc3gpfacngbau.canadacentral-01.azurewebsites.net"
        echo "   Environment: $(environment)"
        echo ""
        echo "ðŸ”§ Backend API:"
        echo "   URL: https://inspect-connect-api-test-bgb3gea5c0ezfkfe.canadacentral-01.azurewebsites.net"
        echo "   Environment: $(environment)"
        echo ""
        echo "ðŸ“Š Build Information:"
        echo "   Build ID: $(Build.BuildId)"
        echo "   Build Number: $(Build.BuildNumber)"
        echo "   Source Branch: $(Build.SourceBranch)"
        echo "   Commit: $(Build.SourceVersion)"
        echo ""
        echo "âœ… All applications deployed successfully!"
        echo "=============================================================================="
      displayName: 'Deployment Summary'
