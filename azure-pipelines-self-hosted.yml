trigger:
  branches:
    include: [ main, develop ]

variables:
  nodeVersion: '20.x'
  npmCacheDir: '$(Pipeline.Workspace)/.npm'

  environment: 'production'
  azureSubscription: 'inspect-connect-appservice'
  resourceGroupName: 'inspect_connect-rg'

  frontendAppName: 'inspect-connect-test'
  backendAppName:  'inspect-connect-api-test'

stages:
# =========================
# Stage 1: Build (FE & BE)
# =========================
- stage: Build
  displayName: Build Frontend & Backend
  jobs:
  - job: BuildAll
    displayName: Build
    pool:
      name: 'inspect-connect-agents'

    steps:
    - checkout: self

    - task: NodeTool@0
      inputs: { versionSpec: $(nodeVersion) }
      displayName: Use Node.js $(nodeVersion)

    # Resolve backend default hostname for VITE_API_URL
    - task: AzureCLI@2
      displayName: 'Resolve BE defaultHostName'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(backendAppName) --query defaultHostName -o tsv)
          echo "Resolved backend host: $HOST"
          echo "##vso[task.setvariable variable=BACKEND_HOST]$HOST"

    # --- Frontend ---
    - script: |
        set -e
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --prefer-offline --no-audit || npm install --legacy-peer-deps --prefer-offline --no-audit
        npm run build || npx vite build
      workingDirectory: client
      displayName: 'FE: Install & Build'
      env:
        VITE_API_URL: "https://$(BACKEND_HOST)"

    - task: ArchiveFiles@2
      displayName: 'FE: Package dist'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/client/dist'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: 'FE: Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        artifact: 'frontend'

    # --- Backend ---
    - script: |
        set -e
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --prefer-offline --no-audit || npm install --legacy-peer-deps --prefer-offline --no-audit
        npm run build
        npm prune --omit=dev
      workingDirectory: server
      displayName: 'BE: Install & Build'

    - task: ArchiveFiles@2
      displayName: 'BE: Package app'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/server'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true

    - task: PublishPipelineArtifact@1
      displayName: 'BE: Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/server.zip'
        artifact: 'backend'

# =========================
# Stage 2: Frontend Deploy
# =========================
- stage: FrontendDeploy
  displayName: Deploy Frontend
  dependsOn: Build
  jobs:
  - job: DeployFrontend
    pool:
      name: 'inspect-connect-agents'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'frontend'
        path: '$(Pipeline.Workspace)/frontend'

    - task: AzureCLI@2
      displayName: 'FE: ZipDeploy'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp deployment source config-zip --resource-group $(resourceGroupName) --name $(frontendAppName) --src "$(Pipeline.Workspace)/frontend/frontend.zip"
          az webapp config appsettings set --resource-group $(resourceGroupName) --name $(frontendAppName) --settings WEBSITES_PORT=8080
          az webapp config set --resource-group $(resourceGroupName) --name $(frontendAppName) --startup-file "pm2 serve /home/site/wwwroot 8080 --spa --no-daemon"

    # Resolve FE host for smoke test
    - task: AzureCLI@2
      displayName: 'FE: Resolve defaultHostName'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(frontendAppName) --query defaultHostName -o tsv)
          echo "Resolved FE host: $HOST"
          echo "##vso[task.setvariable variable=FE_HOST]$HOST"

    # Smoke test (uses resolved FE_HOST)
    - bash: |
        set -euo pipefail
        URL="https://$(FE_HOST)"
        echo "Probing $URL ..."
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
            echo "Frontend reachable (HTTP $code)"
            break
          fi
          echo "Attempt $i: HTTP $code; retrying..."
          sleep 5
        done
        html=$(curl -fsS "$URL")
        echo "$html" | grep -qi "<title>" || { echo "Missing <title> in HTML"; exit 1; }
      displayName: 'FE: Smoke check'

# =========================
# Stage 3: Backend Deploy
# =========================
- stage: BackendDeploy
  displayName: Deploy Backend
  dependsOn: Build
  jobs:
  - job: DeployBackend
    pool:
      name: 'inspect-connect-agents'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'backend'
        path: '$(Pipeline.Workspace)/backend'

    - task: AzureCLI@2
      displayName: 'BE: ZipDeploy'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp deployment source config-zip --resource-group $(resourceGroupName) --name $(backendAppName) --src "$(Pipeline.Workspace)/backend/server.zip"
          az webapp config appsettings set --resource-group $(resourceGroupName) --name $(backendAppName) --settings WEBSITE_NODE_DEFAULT_VERSION="~20" WEBSITES_PORT=5002 NODE_ENV=production MONGODB_URI="$(MONGODB_URI)" JWT_SECRET="$(JWT_SECRET)" SENDGRID_API_KEY="$(SENDGRID_API_KEY)" TWILIO_ACCOUNT_SID="$(TWILIO_ACCOUNT_SID)" TWILIO_AUTH_TOKEN="$(TWILIO_AUTH_TOKEN)" CLOUDINARY_CLOUD_NAME="$(CLOUDINARY_CLOUD_NAME)" CLOUDINARY_API_KEY="$(CLOUDINARY_API_KEY)" CLOUDINARY_API_SECRET="$(CLOUDINARY_API_SECRET)"
          az webapp config set --resource-group $(resourceGroupName) --name $(backendAppName) --startup-file "node dist/server.js"

    # Resolve BE host for smoke test
    - task: AzureCLI@2
      displayName: 'BE: Resolve defaultHostName'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          HOST=$(az webapp show -g $(resourceGroupName) -n $(backendAppName) --query defaultHostName -o tsv)
          echo "Resolved BE host: $HOST"
          echo "##vso[task.setvariable variable=BE_HOST]$HOST"

    # Smoke test (uses resolved BE_HOST)
    - bash: |
        set -euo pipefail
        URL="https://$(BE_HOST)/health"
        echo "Probing $URL ..."
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [ "$code" = "200" ]; then
            echo "Backend healthy (HTTP 200)"
            exit 0
          fi
          echo "Attempt $i: HTTP $code; retrying..."
          sleep 5
        done
        echo "Backend did not become healthy"; exit 1
      displayName: 'BE: Smoke check'

# =========================
# Stage 4: Summary
# =========================
- stage: DeploymentSummary
  displayName: Deployment Summary
  dependsOn: [ FrontendDeploy, BackendDeploy ]
  jobs:
  - job: Summary
    pool:
      name: 'inspect-connect-agents'
    steps:
    - script: |
        echo "=============================================================================="
        echo "ðŸŽ‰ DEPLOYMENT COMPLETE"
        echo "=============================================================================="
        echo "Frontend URL (resolved at runtime)."
        echo "Backend  URL (resolved at runtime)."
        echo "Env: $(environment) | Build: $(Build.BuildNumber)"
      displayName: Summary
