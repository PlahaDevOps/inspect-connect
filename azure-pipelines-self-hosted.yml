# =============================================================================
# Inspect Connect - Production CI/CD Pipeline (Option A: build on agent)
# =============================================================================

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - client/*
      - server/*
      - azure-pipelines-self-hosted.yml

variables:
  nodeVersion: '20.x'
  npmCacheDir: '$(Pipeline.Workspace)/.npm'

  environment: 'production'
  frontendAppName: 'inspect-connect-test-fyanc3gpfacngbau'
  backendAppName: 'inspect-connect-api-test-bgb3gea5c0ezfkfe'
  resourceGroupName: 'inspect_connect-rg'

  azureSubscription: 'inspect-connect-appservice'

stages:
# =============================================================================
# Stage 1: Environment Setup
# =============================================================================
- stage: EnvironmentSetup
  jobs:
  - job: SetupEnvironment
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Setup Node.js Environment'

    - script: |
        echo "=== Environment Information ==="
        node -v
        npm -v
        echo "Agent: $(Agent.Name)"
        echo "Working Directory: $(Build.SourcesDirectory)"
        echo "================================="
      displayName: 'Validate Build Environment'

# =============================================================================
# Stage 2: Frontend Build
# =============================================================================
- stage: FrontendBuild
  dependsOn: EnvironmentSetup
  jobs:
  - job: BuildFrontend
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent
    steps:
    - task: Cache@2
      inputs:
        key: 'npm-cache | $(Agent.OS)'
        path: '$(npmCacheDir)'

    - task: Cache@2
      inputs:
        key: 'node_modules | $(Agent.OS) | client | $(Build.SourcesDirectory)/client/package-lock.json'
        restoreKeys: |
          node_modules | $(Agent.OS) | client
        path: '$(Build.SourcesDirectory)/client/node_modules'

    - script: |
        echo "Installing frontend dependencies..."
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --no-audit --prefer-offline || npm install --legacy-peer-deps --no-audit --prefer-offline
        echo "Frontend dependencies installed successfully"
      workingDirectory: $(Build.SourcesDirectory)/client
      displayName: 'Install Frontend Dependencies'

    - task: Cache@2
      inputs:
        key: 'node_modules | $(Agent.OS) | client | $(Build.SourcesDirectory)/client/package-lock.json'
        path: '$(Build.SourcesDirectory)/client/node_modules'

    - script: |
        echo "Running TypeScript type checking..."
        npx tsc --noEmit || echo "TypeScript warnings found (non-blocking)"
      workingDirectory: $(Build.SourcesDirectory)/client
      continueOnError: true
      displayName: 'TypeScript Type Checking'

    - script: |
        echo "Building frontend application..."
        npx vite build
        echo "Frontend build completed successfully"
      workingDirectory: $(Build.SourcesDirectory)/client
      env:
        VITE_API_URL: "https://inspect-connect-api-test-bgb3gea5c0ezfkfe.canadacentral-01.azurewebsites.net"
      displayName: 'Build Frontend Application'

    - task: ArchiveFiles@2
      displayName: 'Package Frontend dist'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/client/dist'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true

# =============================================================================
# Stage 3: Frontend Deployment
# =============================================================================
- stage: FrontendDeploy
  dependsOn: FrontendBuild
  jobs:
  - job: DeployFrontend
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent
    steps:
    - task: AzureCLI@2
      continueOnError: true
      displayName: 'Azure Connectivity & App Service Validation (FE)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          echo "=== Azure Connectivity Test (FE) ==="
          az account show --output table
          echo "Checking Frontend App Service: $(frontendAppName)"
          az webapp show --name $(frontendAppName) --resource-group $(resourceGroupName) --query "{name:name,state:state,host:defaultHostName}" -o table

    - task: AzureWebApp@1
      displayName: 'Deploy Frontend via ZipDeploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: webAppLinux
        appName: $(frontendAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        appSettings: '-WEBSITES_PORT 8080'
        startupCommand: 'pm2 serve /home/site/wwwroot 8080 --spa --no-daemon'

# =============================================================================
# Stage 4: Backend Build
# =============================================================================
- stage: BackendBuild
  dependsOn: EnvironmentSetup
  jobs:
  - job: BuildBackend
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent
    steps:
    - task: Cache@2
      inputs:
        key: 'npm-cache | $(Agent.OS)'
        path: '$(npmCacheDir)'

    - task: Cache@2
      inputs:
        key: 'node_modules | $(Agent.OS) | server | $(Build.SourcesDirectory)/server/package-lock.json'
        restoreKeys: |
          node_modules | $(Agent.OS) | server
        path: '$(Build.SourcesDirectory)/server/node_modules'

    - script: |
        echo "Installing backend dependencies and building..."
        npm config set cache "$(npmCacheDir)"
        npm ci --legacy-peer-deps --no-audit --prefer-offline || npm install --legacy-peer-deps --no-audit --prefer-offline
        npm run build
        npm prune --omit=dev
        echo "Backend build completed successfully"
      workingDirectory: $(Build.SourcesDirectory)/server
      displayName: 'Install/Build/Prune Backend'

    - task: Cache@2
      inputs:
        key: 'node_modules | $(Agent.OS) | server | $(Build.SourcesDirectory)/server/package-lock.json'
        path: '$(Build.SourcesDirectory)/server/node_modules'

    - task: ArchiveFiles@2
      displayName: 'Package Backend Application'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/server'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true

# =============================================================================
# Stage 5: Backend Deployment
# =============================================================================
- stage: BackendDeploy
  dependsOn: BackendBuild
  jobs:
  - job: DeployBackend
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent
    steps:
    - task: AzureCLI@2
      continueOnError: true
      displayName: 'Azure Connectivity & App Service Validation (BE)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          echo "=== Azure Connectivity Test (BE) ==="
          az account show --output table
          echo "Checking Backend App Service: $(backendAppName)"
          az webapp show --name $(backendAppName) --resource-group $(resourceGroupName) --query "{name:name,state:state,host:defaultHostName}" -o table

    - task: AzureWebApp@1
      displayName: 'Deploy Backend Zip'
      inputs:
        azureSubscription: $(azureSubscription)
        appType: webAppLinux
        appName: $(backendAppName)
        resourceGroupName: $(resourceGroupName)
        package: '$(Build.ArtifactStagingDirectory)/server.zip'
        appSettings: |
          -WEBSITE_NODE_DEFAULT_VERSION ~20
          -WEBSITES_PORT 5002
          -NODE_ENV production
          -MONGODB_URI $(MONGODB_URI)
          -JWT_SECRET $(JWT_SECRET)
          -SENDGRID_API_KEY $(SENDGRID_API_KEY)
          -TWILIO_ACCOUNT_SID $(TWILIO_ACCOUNT_SID)
          -TWILIO_AUTH_TOKEN $(TWILIO_AUTH_TOKEN)
          -CLOUDINARY_CLOUD_NAME $(CLOUDINARY_CLOUD_NAME)
          -CLOUDINARY_API_KEY $(CLOUDINARY_API_KEY)
          -CLOUDINARY_API_SECRET $(CLOUDINARY_API_SECRET)
        startupCommand: 'node dist/server.js'

# =============================================================================
# Stage 6: Deployment Summary
# =============================================================================
- stage: DeploymentSummary
  dependsOn:
    - FrontendDeploy
    - BackendDeploy
  jobs:
  - job: Summary
    pool:
      name: 'inspect-connect-agents'
      demands:
        - agent.name -equals inspect-connect-mac-agent
    steps:
    - script: |
        echo "=============================================================================="
        echo "ðŸŽ‰ DEPLOYMENT COMPLETED SUCCESSFULLY"
        echo "=============================================================================="
        echo ""
        echo "ðŸ“± Frontend:"
        echo "   https://$(frontendAppName).canadacentral-01.azurewebsites.net"
        echo "ðŸ”§ Backend:"
        echo "   https://$(backendAppName).canadacentral-01.azurewebsites.net"
        echo ""
        echo "Env: $(environment)"
        echo "Build ID: $(Build.BuildId)  Number: $(Build.BuildNumber)"
        echo "Branch: $(Build.SourceBranch)  Commit: $(Build.SourceVersion)"
        echo "=============================================================================="
      displayName: 'Deployment Summary'
